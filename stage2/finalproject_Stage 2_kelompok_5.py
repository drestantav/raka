# -*- coding: utf-8 -*-
"""Finalproject_Kelompok 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W98lHi4sddEZoiN6J0c3hDdCCawSNskn

KELOMPOK 5

1. Descriptive Statistics <br>
Gunakan function info dan describe pada dataset final project kalian. Tuliskan hasil 
observasinya, seperti:<br>
A. Apakah ada kolom dengan tipe data kurang sesuai, atau nama kolom dan isinya 
kurang sesuai?<br>
B. Apakah ada kolom yang memiliki nilai kosong? Jika ada, apa saja?<br>
C. Apakah ada kolom yang memiliki nilai summary agak aneh?<br>
(min/mean/median/max/unique/top/freq) <br>
* Untuk masing-masing jenis observasi, tuliskan juga jika tidak ada masalah,
 misal untuk A: “Semua tipe data sudah sesuai”
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive 
drive.mount('/content/gdrive')

df = pd.read_csv('gdrive/My Drive/Training Data.csv')

df.head()

df.columns

from matplotlib import rcParams

rcParams['figure.figsize'] = 12, 4
rcParams['lines.linewidth'] = 3
rcParams['xtick.labelsize'] = 'x-large'
rcParams['ytick.labelsize'] = 'x-large'

df.info()

"""Terdapat 13 varibel dan 252000 baris data untuk tiap variabel. Semua tipe data sudah benar."""

df.isnull().sum()

"""Tidak terdapat nilai kosong di 13 variabel tersebut"""

df.describe()

"""Untuk nilai summary di setiap kolom masih tidak ada masalah. Bisa dilihat bahwa untuk setiap kolom perbedaan antara mean dan median tidak begitu jauh."""

cats = ['Married/Single', 'Car_Ownership', 'House_Ownership', 'Profession', 'CITY', 'STATE']
nums = ['Income', 'Age', 'Experience', 'CURRENT_JOB_YRS', 'CURRENT_HOUSE_YRS']

df[cats].describe()

for col in cats:
    print(f'''Value count kolom {col}:''')
    print(df[col].value_counts())
    print()

"""Di kolom **City** dan **State** terdapat banyak kota yang ada nomor disebelahnya. Nantinya data tersebut perlu dibersihkan agar mempermudah proses pemodelan

2. Univariate Analysisis <br>
Gunakan visualisasi untuk melihat distribusi masing-masing kolom (feature maupun 
target). Tuliskan hasil observasinya, misalnya jika ada suatu kolom yang distribusinya 
menarik (misal skewed, bimodal, ada outlier, ada nilai yang mendominasi, kategorinya 
terlalu banyak, dsb). Jelaskan juga apa yang harus di-follow up saat data pre-processing.

DATA NUMERIK
"""

plt.figure(figsize=(10,8))
for i in range(0, len(nums)):
    plt.subplot(1, len(nums), i+1)
    sns.boxplot(y=df[nums[i]], color='yellow', orient='v')
    plt.tight_layout()

"""Dari distribusi boxplot diatas untuk tipe data yang numerik bisa dilihat bahwa tidak terdapat outlier sama sekali di masing-masing kolom."""

plt.figure(figsize=(10,8))
for i in range(0, len(nums)):
    plt.subplot(2, len(nums), i+1)
    sns.distplot(df[nums[i]], color='red')
    plt.tight_layout()

"""Dari distribution plot diatas bisa dilihat bahwa untuk variabel 'Income', 'Age' dan 'Experience' distribusinya uniform, sehingga akan dilakukan transformasi agar distribusinya menjadi normal. Sedangkan untuk 'CURRENT_JOB_YRS' distribusinya skew ke kanan, dimana nilai mean lebih besar daripada nilai median. Terakhir untuk distribusi 'CURRENT_HOUSE_YRS' distribusinya merupakan multimodal dimana memiliki beberapa puncak."""

for i in range(0, len(nums)):
  plt.subplot(1, len(nums), i+1)
  sns.violinplot(y = df[nums[i]], color = 'green')
  plt.tight_layout()

"""DATA KATEGORIK"""

plt.figure(figsize=(12,12))
for i in range(0, len(cats[:3])):
    plt.subplot(2, 3, i+1)
    sns.countplot(df[cats[:3][i]], color='yellow', orient='h')
    plt.tight_layout()

plt.figure(figsize=(12,12))
for i in range(0, len(cats[3:])):
    plt.subplot(3, 1, i+1)
    sns.countplot(df[cats[3:][i]], color='yellow', orient='h')
    plt.xticks(rotation=90)
    plt.tight_layout(pad=4)



"""Untuk data kategorik, dapat dilihat untuk kolom 'Married/Single' didominasi oleh value 'single', kolom 'Car_Ownership' didominasi oleh value 'no', dan kolom 'House_Ownership' didominasi oleh value 'rented'. Ketiga kolom tersebut nantinya akan dilakukan encoding untuk mengubah valuenya menjadi numerik.

Untuk kolom 'Profession','CITY', dan 'STATE', memiliki banyak unique value, sehingga untuk data tersebut akan dilihat apakah kolom tersebut berpengaruh terhadap target atau tidak. Jika tidak akan didrop, jika iya maka akan dilakukan encoding atau dilakukan pengerucutan dulu lalu encoding.
"""

df.corr()

plt.figure(figsize=(8, 8))
sns.heatmap(df.corr(), cmap='Blues', annot=True, fmt='.2f')

plt.figure(figsize=(15, 15))
sns.pairplot(df, diag_kind='kde')

"""**4. Business Insight <br>**
Selain EDA, lakukan juga beberapa analisis dan visualisasi untuk menemukan suatu 
business insight. Tuliskan minimal 3 insight, dan berdasarkan insight tersebut jelaskan 
rekomendasinya untuk bisnis.

"""

defaulted = df.Risk_Flag.sum()
total = len(df.Risk_Flag)
rate_of_default = defaulted / total
print(f"The rate of 'defaulted-on-loan' is {rate_of_default * 100 }% and total number of defaulter are", defaulted)

"""TOTAL USER (PAID AND DEFAULTED)"""

f, ax = plt.subplots(1,2, figsize=(20,10))
df.Risk_Flag.value_counts().plot.pie(explode=[0,0.1], autopct= "%1.f%%", shadow = True, ax=ax[0])
ax[0].set_title("Paid vs Defaulted")
ax[0].set_ylabel("")
sns.countplot("Risk_Flag", data=df, ax=ax[1])
ax[1].set_title("Paid vs Defaulted")
plt.show()

"""PERSENTASE PINJAMAN YANG BERHASIL TERBAYAR TIAP STATE"""

(pd.crosstab(df.STATE, df.Risk_Flag, margins=True)[1] / pd.crosstab(df.STATE, df.Risk_Flag, margins=True)["All"]).plot.bar().set(title="Paid rate in States")
fig = plt.gcf()
fig.set_size_inches(10,8)
plt.show()

"""PERSENTASE PINJAMAN YANG BERHASIL TERBAYAR TIAP PROFESI"""

(pd.crosstab(df.Profession, df.Risk_Flag, margins=True)[1] / pd.crosstab(df.Profession, df.Risk_Flag, margins=True)["All"]).plot.bar().set(title="Paid rate by Profession")
fig = plt.gcf()
fig.set_size_inches(10,8)
plt.show()

"""PRESENTASE PINJAMAN YANG BERHASIL DIBAYAR BERDASARKAN HOUSE OWNERSHIP"""

(pd.crosstab(df['House_Ownership'], df.Risk_Flag, margins=True)[1] / pd.crosstab(df['House_Ownership'], df.Risk_Flag, margins=True)["All"]).plot.bar().set(title="Paid rate by House Ownership")
fig = plt.gcf()
fig.set_size_inches(10,8)
plt.show()

"""PRESENTASE PINJAMAN YANG BERHASIL DIBAYAR BERDASARKAN CAR OWNERSHIP"""

(pd.crosstab(df['Car_Ownership'], df.Risk_Flag, margins=True)[1] / pd.crosstab(df['Car_Ownership'], df.Risk_Flag, margins=True)["All"]).plot.bar().set(title="Paid rate by Car Ownership")
fig = plt.gcf()
fig.set_size_inches(10,8)
plt.show()

"""PRESENTASE PINJAMAN YANG BERHASIL DIBAYAR BERDASARKAN MARITAL STATUS"""

(pd.crosstab(df['Married/Single'], df.Risk_Flag, margins=True)[1] / pd.crosstab(df['Married/Single'], df.Risk_Flag, margins=True)["All"]).plot.bar().set(title="Paid rate by Marital Status")
fig = plt.gcf()
fig.set_size_inches(10,8)
plt.show()

"""HUBUNGAN INCOME DENGAN RISK FLAG"""

sns.kdeplot(df[df['Risk_Flag']==1]['Income'],color='red',label='1')
sns.kdeplot(df[df['Risk_Flag']==0]['Income'],color='blue',label='0')
plt.legend()
plt.tight_layout()

"""HUBUNGAN HOUSE OWNERSHIP DAN RISK FLAG"""

sns.countplot(data = df, x= 'House_Ownership', hue='Risk_Flag')

"""HUBUNGAN CAR OWNERSHIP DAN RISK FLAG"""

sns.histplot(data=df, x='Car_Ownership', hue='Risk_Flag')

"""HUBUNGAN AGE DAN RISK FLAG"""

sns.histplot(data=df, y='Age', hue='Risk_Flag')

"""HUBUNGAN CURRENT JOB YEARS DAN RISK FLAG"""

sns.kdeplot(df[df['Risk_Flag']==0]['CURRENT_JOB_YRS'],color='blue',label='0')
sns.kdeplot(df[df['Risk_Flag']==1]['CURRENT_JOB_YRS'],color='red',label='1')
# plt.axvline(x=np.median(df_single_0['Income']), ls=':',color='blue')
# plt.axvline(x=np.median(df_single_1['Income']), ls=':',color='red')
plt.legend()
plt.tight_layout()

"""HUBUNGAN PROFESI DAN RISK FLAG"""

plt.figure(figsize=(30,28))
sns.countplot(data= df, y= 'Profession', hue='Risk_Flag')

df.rename(columns = {"Married/Single" : "Marital_status"},inplace=True)

df.Marital_status.value_counts()

married_default_rate = 2636 / 25728 
single_default_rate = 28360 / 226272
print(f"default-on-loan for married is {round(married_default_rate * 100)} %\n"
      f"default-on-loan for single is {round(single_default_rate * 100)}%")

"""HUBUNGAN MARITAL STATUS DAN RISK FLAG"""

f, ax = plt.subplots(1,2,figsize=(18,8))
df.Marital_status.value_counts().plot.bar(ax=ax[0]).set(title = "no. of singles and married")
sns.countplot(df.Marital_status, hue=df.Risk_Flag, ax=ax[1]).set(title="Paid and Default based on Marital status")

"""# **DARI GRAFIK DI ATAS DIDAPAT INSIGHT SEBAGAI BERIKUT**

---


- 88% DATA MERUPAKAN USER DENGAN RISK FLAG 0
- DATA DIDOMINASI OLEH USER DENGAN MARITAL STATUS SINGLE, NO CAR OWNERSHIP, RENTED HOUSE OWNERSHIP, DAN USER DENGAN CURRENT JOB YEARS 3-5
- PERSENTASE USER BERHASIL MEMBAYAR LOAN RELATIF KECIL UNTUK SEMUA DATA KATEGORIK (RATA RATA KURANG DARI 20%)
- DISTRIBUSI INCOME, AGE, DAN EXPERIENCE UNIFORM
- DISTRIBUSI DATA NUMERIK UNTUK DATA DENGAN RISK FLAG 0 DAN DATA DENGAN RISK FLAG 1 HAMPIR SAMA
- PERBANDINGAN DATA KATEGORIK DENGAN RISK FLAG 0 DAN DATA DENGAN RISK FLAG 1 HAMPIR SAMA


---



Dari data yang diperoleh cukup sulit untuk menentukan alasan user gagal melakukan pembayaran, karena sebagian besar distribusi datanya uniform. sehingga kami berhipotesa bahwa alasan user gagal melakukan pembayaran yaitu total loan nya. Untuk mengatasi permasalahan tersebut dan mengurangi default rate dan revenue loss, kami merekomendasikan untuk melakukan segmentasi customer, dimana customer akan dibagi ke dalam beberapa tier berdasarkan data customer, dan jumlah pinjamannya berdasarkan tier customernya.
"""